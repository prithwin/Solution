************************************************************************************************************************
Q1. What are the advantages of using an executor framework to just simply starting and running a thread.
A1: *it separates task submittion from task execution,letting you control some aspects of the thread execution
    *using thread.start is unbounded so it doesn't place any JVM level bounds on how many threads that can be started.
    *It provides some lifecycle methods that can get some lifecycle related, you can control lifecycle like kill
    and check if its alive
    *Thread creation is an expensive process and its managed much better within the executors.
    *you can use Callables which return a value.
    *you can use timed executors.
    *you can use completion service which can be used with a batch of classes.
************************************************************************************************************************
Q2. Can an overloaded method specify a different return type.
A2. the overloaded method must have exactly the same signature, it can return a subclass of the return type, this Rule
    applies to interfaces too.
************************************************************************************************************************
Q3. Can an overloaded method change the throws clause.
A3. like the return type the method in the child class should be below it in inheritance hierarchy, this rules applies
    to interface too.
************************************************************************************************************************
Q4. Tell me the difference between hibernate CASCADE and INVERT.
A4. CASCADE hibernate session that this particular object should be saved or updated if the driver of that relation gets
    updated. INVERSE reverses this relation, you put in on one to many or many to many relations where you would have p-
    ut cascade. doing so wiil make the child drive the relationship
************************************************************************************************************************
Q5. what are Generics used for.
A5. writing template methods and compile time type checking.ideally if you are making type errors you better find out a-
    bout it at the compile time rather than finding out about it at the runtime.
************************************************************************************************************************
Q6. how do you work with more than one database with hibernate.
A6. with Raw hibernate you would need a handle to a different session through different sessionfactory, so only option
    I a web application is to have a listener initialize a separate factory, then you getting a different factory for
    database. if you using a JPA implementation like spring orm. you can easily inject a different persistence unit that
    you would have declare in your persistance.xml.
************************************************************************************************************************
Q7. Was shown a piece of code in which there was a for loop, we were removing the an element from the list using an
    enhanced for loop. for example:
     for(item : list){
     list.remove(item)
     }
     was asked what will happen.
A7: There will be a concurrent modification exception because of the way this the enhanced for works, the Iterators that
    are returned by the non-concurrent APIs are called fail fast iterators, wouldn't be a problem if you iterated using
    an index.
************************************************************************************************************************
Q8: advantages of using ORM software.
A8: you can switch out any database you want and it also lets you do Object relational mapping.
************************************************************************************************************************
Q9: what are the various types of joins in SQL should be able to show it.
A9: INNER JOIN, OUTER JOIN, SELF JOIN.
************************************************************************************************************************
Q10: What are the differences between REST and SOAP WebServices.
A10: These are the major differences that influence our decision.
     -WS protocol stack is very heavy weight, REST is light weight.
     -WS can use any transport layer protocol.
     -WS can implement A tighter security at the added cost of encryption decryption
     -Usually handled at the front end.
************************************************************************************************************************
Q11: what are projections in database?
A11: A select clause.
************************************************************************************************************************
Q12: can you inject a singleton bean in a prototype bean?and the other way round?
A12: Yes you can and its quite obvious what happens there.
************************************************************************************************************************
Q13: what is n and n+1 query problem?
A13: Its the problem that you fix by lazy initialization.
************************************************************************************************************************
Q14: Types of lock provided by java.
A14: A Re-enterent lock is what is provided by java, you have a readWrite Lock too.
************************************************************************************************************************
Q15: how to send back an error using spring MVC/rest controller
A15: With spring you can have an exception class annotated by a responese type annotation and whenever you throw this ex
     ception(preferably runtime) you'll see that these exceptions are going back as error codes to your clients. you hav
     to add the @ResponseSatus annotation.

     there are other ways to handle it too, you can declaratively create an exceptionhandler . where you put an @Control
     ler advice object and put exception handler

************************************************************************************************************************
Q16: how do you manage change in rest services response.
A16: versioning a rest service is the way to go.
************************************************************************************************************************
Q17: describe the entire collection framework in java
A17: here is the entire collection framework described in one breath.
     <<List Types>>
     ArrayList -> a list of objects backed by an array.
     LinkedList -> a linked List.
     PriorityQueue -> a minheap based priority Queue.
     BlockingQueue -> a Blocking Queue.
     Stack -> a stack.

     <<Maps>>
     HashMap -> a hash Based map. O(1) O(1) insertions and deletions. hashcode ordered traversal.
     TreeMap -> a Map where the keys are stored in the a Self balancing tree(AVL/ Red-black).iteration is in the natur-
     l order
     LinkedHashMap -> a hashMap where iteration is performed using a linked list hence it preserves insertion order.
     ConcurrentHashMap -> segmented locks.
     WeakHashMap -> hashMap where the instances are weak references

     <<Sets>>
     HashSet -> a hashmap based set.
     TreeMap ->  a treeMap Based Set.
************************************************************************************************************************
Q18: Was asked a lot of details about rest controllers from framework setup perspective, Can be summarized as follows.
A18: >how do you declare a controller?
     >using the @Controller annotation

     >how do you make it return an object?
     >@ResponseBody annotation.

     >how do you make a Rest controller accept Query params.
     >query params are the Request parameters themselves, in case of GET they are sent as un-encoded in the URL, in POST
      Request they are sent encoded in the Form, regardless of whether it is a GET or a POST, this information would be
      references in our restController using the RequstParam.
      @Component("someWebService")

      @RequestMapping(value="/users")
      class myController {


          @RequestMapping(value = "/resourceName/{userId}",method = HTTPMethodType.GET,produces = ResponseType.SOMETHING)
          public @ResponseBody ReturnTypeVo someMethod(@PathParam int userId, @RequestParam String queryParameter){

          }
      }
************************************************************************************************************************
Q19: How can I get access to HttpRequst and HttpResposne Objects in spring web services controllers?
A19: which ever controller has additional HTTPRequest and HttpResponse objects as an argument would receive the objects
************************************************************************************************************************
Q20: How do you access the HttpSession or Request params from the HttpRequest Object?
A20: You get the session from request.getSession.
************************************************************************************************************************
Q21: new Garbage collection concepts in java 8.
A21: there are 4 GC algorithm is java after java 8
     >>serial.
     >>parellel.
     >>CMS
     >>G1 garbage collector
************************************************************************************************************************
Q22: what are the different reference types in Java.
A22: there are 4 reference types in java
     >>Strong.
     >>Weak Reference types.
     >>Soft Reference.
     >>Phantom references.
************************************************************************************************************************
Q23: Is there a chance that you can have platform dependent compiled classes.
A23: there are native methods using the native keyword, these are written in other languages and are machine depenedant.
************************************************************************************************************************
Q24: JVM object initialization.
A24: An object is initialized in the following order:
     >>all static Content in the order it appears in the class.
     >> all instance blocks the order in which they appear in the class
************************************************************************************************************************
Q25: what types of Versioning mechanism do you know for rest API?
A25: you can either have a URI based versioning or Metadata based
************************************************************************************************************************
Q26: Naming conventions for rest resources.
A26: >use nouns
     >use plural nouns
     >GETS should be idempotent.
     >HATEOAS means the client should infer everything he wants to do by using the hypermedia or the meta data that you
     are already sending along with your responses.
************************************************************************************************************************
Q27: Which parser do you user to parse extremely large XML files?
A27: the SAX parser is the way to go. Becuase the DOM parser is going to build the entire DOM which is memory intensive
     the SAX parser uses text processing to look for paths withing the XML so its a little space efficient, but will tak
     larger processing times.
************************************************************************************************************************
Q28: What are the best practices used in Rest web services?
A28: Rest is more of a Collection of principles than a set of standard.
     The rest architectural style describes 6 constraints(US LC2):
     -Uniform Interface.
        *resource based
        *Manipulation of operation
        *self descriptive messages
        *HATEOS
     -Stateless
        *It does'nt mean dont manage state.
        *It means all of the state information must be contained in the request itself.
     -Chachable
        *response must say if it can be cached or not, minimize server hits.
     -Client-server
        *Clear separation of client and server.
     -Layered
        *Client cannot tell how the server gets the resposnse, the clients outlook should be absolutely be transparent
     -Code on demand

     HTTP verb:
     POST vs PUT : put is for known resources its an update opartion
                   Post is for a new operation.

     -resource naming and pluralizations.
     -pagination for large amount of resources.
************************************************************************************************************************
Q29: What all can you assert in junit?
A28: We've been Using testNg off late so we can assert
     -equality
     -null
     -truth
     -Sameness
     There are other controls too
     -explicity faling a test case
     -annotations to Expect some exceptions
************************************************************************************************************************
Q30: Hibernate criteria query api overview.
************************************************************************************************************************
Q31: What happens when you type a URL and press enter?
A31: -if the page is cached use it
     -browser uses OS nslookup library to find out the ipaddress of the host. if its not in the hosts file OS knows the
      DNS servers, so makes a query to find the IP address of the host.
     -Browser Opens a TCP connection to the host.
     -browser receives a response.
     -browser checks status
     -browser parses the response.
     -Done.
************************************************************************************************************************
Q32: What is normalization and reverse normalization in a database?
    -normalization is Organization and desing of a database in a manner that reduces redundancy and places its for bette
    r information retrieval.
    eg you have a database.
     ----------------------------------------------------
    | user name | movies Rented |  address | return date |
    |----------------------------------------------------|
    | sam       |A,B,C,D,E      | something| 12/12/45    |
    |----------------------------------------------------|
    1NF: >>all columns/cells should have a single value     >> all rows should be uniquie
         $$ in the above table split the movies rented out into different rows and make introduce uniqueness in terms of
         some combination
          ----------------------------------------------------
         | user name | movies Rented |  address | return date |
         |----------------------------------------------------|
         | sam       |A              | something| 12/12/45    |
         |----------------------------------------------------|
         | sam       |B              | something| 12/12/45    |
         |----------------------------------------------------|
    2NF introduces the concept of a primary and a foreign key
        >> should be in 1NF and  >> should have a key that uniquely identifies the row
         $$ in the above table introduce a primary key, called member number,so the table looks like this
     ----------------------------------------------------------           ____________________
    | pk  | user name |  movies Rented|  address | return date |         |mpk  | name         |
    |-----|----------------------------------------------------|          --------------------
    |  1  | sam       |1              | something| 12/12/45    |         | 1   | pirates      |
    |-----|----------------------------------------------------|
        $$ youll not be able to continue further untill you split this table between member and movies.
     3NF: >> should be in 2NF and should'nt have any transitive dependencies.
     BCNF: >> shouldnt have more than one candiate key.
************************************************************************************************************************




* what is a container.
* multithreading in servlet
* two spring contexts with the same file
* Servlet spec how threads are created or not.
* difference between request forwarding or redirecting.
* order of execution of blocks in java
* what are instance blocks.
* factory design pattern, why is the factory a singleton itself.
* can you implements a consumer for your web service using spring.
* Can you put java code inside a JSP?
* JVM ClassPath describe.
* a little about Java Reflection API.
* Cloning a shallow and deep copy.
* Can a hashMap/HashSet store a null key?
* why are rest APIs stateless.
* Factory design pattern restrict visibility of the constructor.
* how do you implement a monthly a payment schedule.
* adapter pattern on american and indian plugs
* how do you really secure a rest application.
* what java 8 things have you really used.
* draw a UML diagram explaining some USE cases.
* how do you provide security in rest web services.
* implementation of singleton patterns.
* why is string immutable in java?
* how do you make something immutable.
* what's the whole point of having a JVM
* what is the JIT compiler.
* explain SOLID concepts.
* how are cookies intiated.
* review SQL, select disinct and group by without aggregate functions.
* Security considerations around Bill Payment systems.
* http and https flow.
* whats a pointer?
* object on heap or stack
* refresher about TCP UDP and Socket programming in general.
* microservices
* advantges of having session management in HTTP.

